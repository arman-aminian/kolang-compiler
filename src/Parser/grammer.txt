S -> P SS
SS -> P SS
SS -> eps
P -> INCLUDEST
P -> UNIONST
P -> STRUCTST
P -> ENUMST
P -> MAIN
P -> FUNCST
P -> FUNCPROTST
P -> IDTYPE PP
PP -> identifier @PUSH PPP
PPP -> FUNCPROTST
PPP -> DECLSTGLOBAL
FUNCPROTST -> ( @CREATEFUNCDES FUNCARGS ) FUNCBODY
FUNCBODY -> ;
FUNCBODY -> { @SETSTARTOFBODYREGION STL @RETURN }
RETTYPE -> IDTYPE
RETTYPE -> void @PUSH
FUNCARGS -> eps
FUNCARGS -> IDTYPE identifier @PUSH ARRARG @POP FUNCARGSS
FUNCARGSS -> , IDTYPE identifier @PUSH ARRARG @POP FUNCARGSS
FUNCARGSS -> eps
ARRARG -> @SETSIMPLEFUNC eps
ARRARG -> [ @SETARRAYFUNC INITFUNC ] ARRARGP
ARRARGP -> eps @POP
ARRARGP -> [ INITFUNC ] ARRARGP
INITFUNC -> eps
INITFUNC -> integernum @PUSH @SETARRAYSIZEFUNC
STL -> ST STLL
STL -> eps
STLL -> ST STLL
STLL -> eps
ST -> FORST
ST -> UNIONST
ST -> WST
ST -> STRUCTST
ST -> DECLST
ST -> ASTST
ST -> REPST
ST -> IFST
ST -> SWITCHST
ST -> break ; @JMPBREAK
ST -> CALLFUNC ;
REPST -> repeat @PUSHFLAG @PUSHPC R until @BE @JNZ ; @COMPLBREAK
R -> ST
R -> { STL }
RR -> }
FORST -> for identifier @PUSH in ( E , E @FOR ) do @PUSHFLAG FOR
FOR -> ST @ENDFOR
FOR -> { STL } @HERE @ENDFOR
INCLUDEST -> # include < identifier FTYPE >
FTYPE -> eps
FTYPE -> . identifier
UNIONST -> union identifier @PUSH @CREATEUNION { UNIONIN } ;
UNIONIN -> IDTYPE identifier @PUSH @ADDUNIONVALUE UNIONINN UNIONIN
UNIONIN -> eps @POP
UNIONINN -> , identifier @PUSH @ADDUNIONVALUE UNIONINN
UNIONINN -> ; @POP
IDTYPE -> int @PUSH
IDTYPE -> float @PUSH
IDTYPE -> char @PUSH
IDTYPE -> string @PUSH
IDTYPE -> bool @PUSH
STRUCTST -> struct identifier @PUSH @CREATESTRUCT { STRUCTIN } ;
STRUCTIN -> IDTYPE identifier @PUSH @ADDSTRUCTVALUE STRUCTINN STRUCTIN
STRUCTIN -> eps @POP
STRUCTINN -> , identifier @PUSH @ADDSTRUCTVALUE STRUCTINN
STRUCTINN -> ; @POP
ENUMST -> enum identifier { ENUMSTT } ;
ENUMSTT -> identifier ENUMSTTT
ENUMSTT -> eps
ENUMSTTT -> , identifier ENUMSTTT
ENUMSTTT -> eps
E -> B BB @MOVTOTEMP
E -> -- identifier @PUSH @DEC NUMM
E -> ++ identifier @PUSH @INC NUMM
E -> ** identifier NUMM
E -> // identifier NUMM
E -> - NUM NUMM
NUMM -> BB
NUMM -> * T @MULT BB
NUMM -> / T @DIV BB
NUMM -> + T @ADD BB
NUMM -> - T @SUB BB
NUMM -> eps
NUM -> integernum
NUM -> realnum
BB -> & B BB
BB -> | B BB
BB -> eps
B -> T EE
EE -> + T @ADD EE
EE -> - T @SUB EE
EE -> eps
T -> F TT
TT -> * F @MULT TT
TT -> / F @DIV TT
TT -> % F @MOD TT
TT -> eps
F -> identifier @PUSH
F -> integernum @PUSH
F -> realnum @PUSH
F -> ( E FF )
FF -> eps
FF -> ++
FF -> --
FF -> //
FF -> **
WST -> while @PUSHFLAG @PUSHPC @BE @JZ W @COMPLBREAK
W -> ST @JMPCOMPLJZ
W -> { STL } @JMPCOMPLJZ
DECLSTGLOBAL -> ARRDEC DEFINE DECLSTT
DECLST -> IDTYPE identifier @PUSH ARRDEC DEFINE DECLSTT
DECLSTT -> ; @POP
DECLSTT -> , identifier @PUSH ARRDEC DEFINE DECLSTT
DEFINE -> eps @POP
DEFINE -> := DEFINEEEEP
DEFINEEEEP -> DEFINEEEE @SETEVALUE
DEFINEEEEP -> CALLFUNC @ASIGNCALLER
DEFINEEEE -> { DEFINEE
DEFINEEEE -> VALUE
VALUE -> identifier
VALUE -> character @PUSH
VALUE -> stringliteral @PUSH
VALUE -> E
DEFINEE -> }
DEFINEE -> VALUE DEFINEEE
DEFINEEE -> , VALUE DEFINEEE
DEFINEEE -> }
ARRDEC -> eps @SETSIMPLEDEC
ARRDEC -> [ @SETARRAYDEC INIT ] ARRDECP
ARRDECP -> eps
ARRDECP -> [ INIT ] ARRDECP
INIT -> eps
INIT -> E @SETARRAYSIZE
ASTST -> ASTL ASTOP ;
ASTL -> identifier @PUSH STRUCTUNION ARR
ARR -> [ E ] ARRP
ARR -> eps
ARRP -> [ E ] ARRP
ARRP -> eps
STRUCTUNION -> . identifier @PUSH @PUSHSTRUCTUNIONADDRESS
STRUCTUNION -> eps @PUSHADDRESS
ASTOP -> := @BE @ASIGN
ASTOP -> = CALLFUNC @ASIGNCALLER
ASTOP -> += @BE @ASIGN
ASTOP -> -= @BE @ASIGN
ASTOP -> *= @BE @ASIGN
ASTOP -> /= @BE @ASIGN
ASTOP -> %= @BE @ASIGN
ASTOP -> ^= @BE @ASIGN
ASTOP -> &= @BE @ASIGN
ASTOP -> |= @BE @ASIGN
ASTOP -> <<= @BE @ASIGN
ASTOP -> >>= @BE @ASIGN
IFST -> if @BE @JZ do I ELSE
ELSE -> eps @COMPLJZIF
ELSE -> else @JMPCOMPLJZIF I @COMPLJMPIF
I -> eps
I -> ST
I -> { STL }
SWITCHST -> switch @PUSHFLAG ( E @JMPL0 ) { SWITCHCASE } @COMPLBREAK
SWITCHCASE -> case CASECONDITION : @PUSHPC CASESTL SWITCHCASEE
SWITCHCASEE -> case CASECONDITION : @PUSHPC CASESTL SWITCHCASEE
SWITCHCASEE -> SWITCHDEFAULT
CASECONDITION -> integernum @PUSH
CASECONDITION -> realnum @PUSH
CASESTL -> STL @JMPOUT
CASESTL -> { STL } @JMPOUT
SWITCHDEFAULT -> eps @SWITCH
SWITCHDEFAULT -> default @PUSHDEFAULT : @PUSHPC CASESTL @SWITCH
CALLFUNC -> call identifier @PUSH @CALLSP ( FUNCPARAM ) @CALL
FUNCPARAM -> PARAM @ASNFUNCPARAM FUNCPARAMM
PARAM -> E
PARAM -> character @PUSH
PARAM -> stringliteral @PUSH
FUNCPARAMM -> , PARAM @ASNFUNCPARAM FUNCPARAMM
FUNCPARAMM -> eps